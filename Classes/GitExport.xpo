Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; 
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #GitExport
    PROPERTIES
      Name                #GitExport
      Extends             #RunBase
      Origin              #{A0D4DFFB-BC7C-4CB8-AECC-8C4147577CBA}
    ENDPROPERTIES
    
    METHODS
      SOURCE #buildNodeMap
        #protected void buildNodeMap(TreeNode _treeNode)
        #{
        #    TreeNodeIterator    treeNodeIterator;
        #    TreeNode            childNode;
        #    Set                 layerSet;
        #
        #    if (GitExport::nodeIsExportable(_treeNode, exportLayers))
        #    {
        #        //nodeMap.insert(_treeNode, _treeNode.AOTLayers()); // _treeNode.AOTLayers() does NOT return all layers!
        #        layerSet = GitExport::treeNodeAOTLayers(_treeNode);
        #        nodeMap.insert(_treeNode, layerSet);
        #        layersInUse = Set::union(layersInUse, layerSet);
        #        progress.setText(_treeNode.treeNodePath(), 2);
        #    }
        #    else // Project, group, etc.
        #    {
        #        setPrefix(_treeNode.treeNodeName());
        #
        #        // Traverse the tree recursively:
        #        treeNodeIterator = _treeNode.AOTiterator();
        #        childNode        = treeNodeIterator.next();
        #
        #        while (childNode)
        #        {
        #            this.buildNodeMap(childNode);
        #
        #            childNode.treeNodeRelease();
        #            childNode = null;
        #
        #            childNode = treeNodeIterator.next();
        #        }
        #    }
        #}
      ENDSOURCE
      SOURCE #canGoBatch
        #public boolean canGoBatch()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/*
        #    Export parm TreeNode and/or all sub-nodes to XPO files
        #*/
        #class GitExport extends RunBase
        #{
        #    #AOT
        #    #TreeNodeSysNodeType
        #    #AotExport
        #    #AviFiles
        #
        #    System.Diagnostics.Stopwatch stopWatch; //TODO: overall timer, avg. time per node
        #
        #    TreeNode                rootNode;
        #    FilePath                repoPath;
        #    NoYes                   synchronize;
        #    NoYes                   exportProjDef;
        #    GitExportLayers         exportLayers;
        #    UtilEntryLevel          parmLayer;
        #    NoYes                   checkoutBranch;
        #    str                     branch;
        #    NoYes                   commit;
        #    NoYes                   commitInteractive;
        #    str                     commitMessage;
        #
        #    Set                     layersInUse;
        #    Map                     nodeMap;
        #    MapEnumerator           nodeMapEnumerator;
        #
        #    Object                  dialogFormRun;
        #
        #    int         dummy;
        #    #DEFINE.CurrentVersion(1)
        #    #LOCALMACRO.CurrentList
        #        dummy
        #    #ENDMACRO
        #}
      ENDSOURCE
      SOURCE #dialog
        #protected Object dialog()
        #{
        #    DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(GitExportDialog), this);
        #
        #    dialog = this.dialogInternal(dialog);
        #
        #    return dialog;
        #}
      ENDSOURCE
      SOURCE #dialogPostRun
        #public void dialogPostRun(DialogRunbase dialog)
        #{
        #    dialogFormRun = dialog.formRun();
        #
        #    super(dialog);
        #}
      ENDSOURCE
      SOURCE #exportAllLayers
        #protected void exportAllLayers()
        #{
        #    UtilEntryLevel  layer;
        #    UtilEntryLevel  layerPrev;
        #    int             foregroundHwnd;
        #
        #    exportLayers = GitExportLayers::SelectedLayer;
        #
        #
        #    progress.setTotal(enumCnt(UtilEntryLevel)+1, 1);
        #
        #    // Iterate through layers
        #    for (layer = 0; layer < enumCnt(UtilEntryLevel); layer++)
        #    {
        #//TODO: verify
        #/*
        #xSession::removeAOC();
        #SysTreeNode::refreshAll();
        #SysFlushDictionary::doFlush();
        #SysFlushAOD::doFlush();
        #xSession::updateAOC();
        #*/
        #        progress.setCount(layer+1, 1);
        #        progress.setText(strFmt('Processing layer: %1', enum2str(layer)), 1);
        #        progress.setCount(0, 2);
        #        progress.setText('', 2);
        #
        #        progress.setTotal(nodeMap.elements(), 2);
        #
        #        Git::checkout(repoPath, enum2str(layer));
        #
        #        //Merge-in changes from the layer below current
        #        if (layer != 0)
        #        {
        #            layerPrev = layer - 1;
        #
        #            Git::merge(repoPath, enum2str(layerPrev));
        #
        #            if (!Git::isClean(repoPath))
        #            {
        #                foregroundHwnd = WinAPI::getForegroundWindow(); // save and then restore active window (progress)
        #
        #                Git::resolveInteractive(repoPath);
        #                Git::mergeInteractive(repoPath);
        #
        #                if (Box::yesNo('Were the conflicts resolved? \nDo you want to proceed?' , DialogButton::Yes) != DialogButton::Yes)
        #                    break;
        #
        #                if (foregroundHwnd)
        #                {
        #                    WinAPI::enableWindow(foregroundHwnd, true);
        #                    WinAPI::bringWindowToTop(foregroundHwnd);
        #                }
        #            }
        #        }
        #
        #        if (synchronize || layersInUse.in(layer))
        #        {
        #            this.exportMap(layer);
        #        }
        #
        #        if (layer == currentAOLayer())
        #        {
        #            this.exportProjectDefinition(rootNode);
        #        }
        #
        #        progress.setCount(0, 2);
        #        progress.setText('', 2);
        #
        #        if (!Git::isClean(repoPath))
        #        {
        #            foregroundHwnd = WinAPI::getForegroundWindow(); // save and then restore active window (progress)
        #
        #            progress.setText('Commit', 2);
        #            Git::commitInteractive(repoPath, enum2str(layer));
        #
        #            if (Box::yesNo("Do you want to proceed to next layer?", DialogButton::Yes) != DialogButton::Yes)
        #                return; //break;
        #
        #            if (foregroundHwnd)
        #            {
        #                WinAPI::enableWindow(foregroundHwnd, true);
        #                WinAPI::bringWindowToTop(foregroundHwnd);
        #            }
        #        }
        #    }
        #
        #    // Finally, merge highest layer branch into 'master'
        #    Git::checkout(repoPath, 'master');
        #
        #    layer = enumCnt(UtilEntryLevel) - 1; // Top layer
        #    Git::merge(repoPath, enum2str(layer));
        #}
      ENDSOURCE
      SOURCE #exportMap
        #protected void exportMap(UtilEntryLevel _layer)
        #{
        #    UtilEntryLevel  layer;
        #    TreeNode        treeNode;
        #    TreeNode        treeNodeInLayer;
        #    Set             layerSet;
        #    Counter         cnt;
        #
        #    nodeMapEnumerator.reset();
        #    while (nodeMapEnumerator.moveNext())
        #    {
        #        cnt++;
        #
        #        treeNode = nodeMapEnumerator.currentKey();
        #        layerSet = nodeMapEnumerator.currentValue();
        #
        #        progress.setCount(cnt, 2);
        #        progress.setText(treeNode.treeNodePath(), 2);
        #
        #        if (synchronize)
        #        {
        #            // Force export of objects in every layer, despite if it is modified there or not
        #            // Otherwise change would not be detected in Git in cases when you clear all customizations for node in some layer
        #
        #            // If node is not modified in the requested _layer,
        #            // find any modified layer immediately below it
        #            for (layer = _layer; layer >= -1; layer--) // -1 indicates that nothing was found
        #            {
        #                if (layerSet.in(layer))
        #                    break;
        #            }
        #        }
        #        else
        #        {
        #            layer = _layer;
        #        }
        #
        #        if (layerSet.in(layer))
        #        {
        #            treeNode.AOTrefresh();
        #            treeNode.AOTrestore();
        #            treeNode.AOTsave();
        #
        #            treeNodeInLayer = treeNode.getNodeInLayer(layer);
        #            GitExport::exportNode(treeNodeInLayer, layer, exportLayers, repoPath);
        #            treeNodeInLayer.treeNodeRelease();
        #            treeNodeInLayer = null;
        #        }
        #
        #        treeNode.treeNodeRelease();
        #        treeNode = null;
        #    }
        #}
      ENDSOURCE
      SOURCE #exportProjectDefinition
        #private void exportProjectDefinition(TreeNode _treeNode)
        #{
        #    if (exportProjDef &&
        #        _treeNode &&
        #        GitExport::nodeIsProject(_treeNode))
        #    {
        #        GitExport::exportNode(_treeNode, currentAOLayer(), GitExportLayers::TopLayer, repoPath, #expProjectOnly);
        #    }
        #}
      ENDSOURCE
      SOURCE #getFromDialog
        #public boolean getFromDialog()
        #{
        #    boolean ret;
        #
        #    repoPath            = dialogFormRun.getPath();
        #    exportProjDef       = dialogFormRun.getExportProjDef();
        #    checkoutBranch      = dialogFormRun.getCheckoutBranch();
        #    branch              = dialogFormRun.getBranch();
        #    exportLayers        = dialogFormRun.getExportLayers();
        #    parmLayer           = dialogFormRun.getLayer();
        #    commit              = dialogFormRun.getCommit();
        #    commitInteractive   = dialogFormRun.getCommitInteractive();
        #    commitMessage       = dialogFormRun.getCommitMessage();
        #
        #    ret = super();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new()
        #{
        #    super();
        #
        #    layersInUse = new Set(Types::Integer);
        #    nodeMap = new Map(Types::Class, Types::Class); // (treeNode, layersSet)
        #    stopWatch = new System.Diagnostics.Stopwatch();
        #}
      ENDSOURCE
      SOURCE #pack
        #public container pack()
        #{
        #    return [#CurrentVersion, #CurrentList];
        #}
      ENDSOURCE
      SOURCE #parmRootNode
        #public TreeNode parmRootNode(TreeNode _rootNode = rootNode)
        #{
        #    rootNode = _rootNode;
        #
        #    return rootNode;
        #}
      ENDSOURCE
      SOURCE #run
        #void run()
        #{
        #
        #    startLengthyOperation();
        #
        #    this.progressInit(strFmt('Exporting to %1', repoPath), 0, #AviUpdate, 2);
        #
        #    progress.setText('Loading...', 1);
        #
        #    this.buildNodeMap(rootNode);
        #    progress.setCount(1, 1);
        #    if (!nodeMap.elements())
        #    {
        #        return;
        #    }
        #
        #    nodeMapEnumerator = nodeMap.getEnumerator();
        #
        #
        #//info(strFmt('Nodes: %1', nodeMap.elements()));
        #
        #    if (exportLayers == GitExportLayers::AllLayers)
        #    {
        #        this.exportAllLayers();
        #    }
        #    else
        #    {
        #        if (checkoutBranch)
        #        {
        #            Git::checkout(repoPath, branch);
        #        }
        #
        #        if (exportLayers == GitExportLayers::CurrentLayer)
        #            parmLayer = currentAOLayer();
        #
        #        this.exportMap(parmLayer);
        #
        #        this.exportProjectDefinition(rootNode);
        #
        #        if (commit)
        #        {
        #            if (commitInteractive)
        #            {
        #                Git::commitInteractive(repoPath, commitMessage);
        #            }
        #            else
        #            {
        #                Git::commit(repoPath, commitMessage);
        #            }
        #        }
        #    }
        #
        #    rootNode.treeNodeRelease();
        #    rootNode = null;
        #
        #    endLengthyOperation();
        #}
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container packedClass)
        #{
        #    Version version = RunBase::getVersion(packedClass);
        #;
        #    switch (version)
        #    {
        #        case #CurrentVersion:
        #            [version,#CurrentList] = packedClass;
        #            break;
        #        default:
        #            return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static GitExport construct(str _menuItemName)
        #{
        #    switch (_menuItemName)
        #    {
        #        case menuitemActionStr(GitSysContextMenuExport) :
        #            return new GitExport();
        #
        #        case menuitemActionStr(GitSysContextMenuExportQuery) :
        #            return new GitExport_Query();
        #
        #        default :
        #            throw(error(strFmt("@SYS19306", funcName())));
        #    }
        #}
      ENDSOURCE
      SOURCE #exportNode
        #private static void exportNode(
        #    TreeNode        _treeNode,
        #    UtilEntryLevel  _layer,
        #    GitExportLayers _exportLayers,
        #    FilePath        _repoPath,
        #    int             _exportFlag = #export)
        #{
        #    str     subPath;
        #    str     fullPath;
        #    int     lastSlashPos;
        #//_treeNode.AOTsave();//TODO
        #    if ((_exportLayers == GitExportLayers::SelectedLayer || _exportLayers == GitExportLayers::CurrentLayer) &&
        #        !_treeNode.getNodeInLayer(_layer, false))
        #    {
        #        return;
        #    }
        #
        #    subPath = _treeNode.treeNodePath();
        #    lastSlashPos = strScan(subPath, '\\', strLen(subPath), -strLen(subPath));
        #    subPath = subStr(subPath, 1, lastSlashPos-1);
        #
        #    // Add sub-folder named after the current user to the Private projects folder tree
        #    if (GitExport::nodeIsProject(_treeNode) && strEndsWith(subPath, 'Private'))
        #    {
        #        subPath +=  '\\' + curUserId();
        #    }
        #
        #    if (!GitExport::folderCheckCreate(_repoPath + subPath))
        #        throw error('could not create path ' + _repoPath + subPath);
        #
        #    fullPath = strFmt('%1%2\\%3.xpo', _repoPath, subPath, _treeNode.treeNodeName());
        #//    if (exportLayers == GitExportLayers::SelectedLayer || exportLayers == GitExportLayers::CurrentLayer)
        #//        info(strFmt("%1 (%2)", fullPath, exportLayer));
        #//    else
        #//        info(fullPath);
        #
        #
        #    if (_treeNode.AOTObjectNode())
        #    {
        #        //_treeNode.AOTrefresh();
        #
        #        if (_exportLayers == GitExportLayers::SelectedLayer || _exportLayers == GitExportLayers::CurrentLayer)
        #            _treeNode.getNodeInLayer(_layer, false).treeNodeExport(fullPath, _exportFlag);
        #        else
        #            _treeNode.treeNodeExport(fullPath, _exportFlag);
        #
        #        GitExport::postExport(_treeNode, fullPath);
        #    }
        #
        #    //_treeNode.treeNodeRelease();
        #}
        #
      ENDSOURCE
      SOURCE #folderCheckCreate
        #static boolean folderCheckCreate(FileName  path)
        #/*
        #    Check if folder exists. If not, try creating whole path folder by folder.
        #*/
        #{
        #    str     segment;
        #    int     slash1Pos;
        #    int     slash2Pos;
        #    ;
        #
        #    if (!path)
        #        return false;
        #    if (WinAPI::folderExists(path))
        #        return true;
        #
        #    // add trailing backslash if not present
        #    if (substr(path, strlen(path), 1) != "\\")
        #        path += "\\";
        #
        #    while (segment != path)
        #    {
        #        slash2Pos = strScan(path, '\\', slash1Pos+1, strLen(path));
        #        segment = subStr(path, 1, slash2Pos);
        #        slash1Pos = slash2Pos;
        #
        #        if (!segment)
        #            return false;
        #        if (WinAPI::folderExists(segment))
        #            continue;
        #        else if (WinAPI::createDirectory(segment) == 0)
        #            continue;
        #        else
        #            return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #nodeIsExportable
        #static boolean nodeIsExportable(TreeNode _treeNode, GitExportLayers _exportLayers)
        #{
        #    if (!_treeNode.AOTObjectNode())
        #        return false;
        #
        #    if (GitExport::nodeIsProject(_treeNode))
        #        return false;
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #nodeIsProject
        #static boolean nodeIsProject(TreeNode _treeNode)
        #{
        #    return (_treeNode && _treeNode is ProjectNode);
        #}
      ENDSOURCE
      SOURCE #postExport
        #static void postExport(
        #    TreeNode    _treeNode,
        #    str         _fullPath)
        #{
        #    System.Text.UTF8Encoding    encoding = new System.Text.UTF8Encoding(true, true);
        #    System.IO.StreamReader      streamReader;
        #    System.IO.StreamWriter      streamWriter;
        #    System.String               text;
        #
        #    //str                                             pattern;
        #    //str                                             propertiesStr;
        #    //System.Text.RegularExpressions.Regex            regEx;
        #    //System.Text.RegularExpressions.Match            regExMatch;
        #    //System.Text.RegularExpressions.MatchCollection  regExMatchCollection;
        #
        #    streamReader = new System.IO.StreamReader(_fullPath, encoding);
        #    text          = streamReader.ReadToEnd();
        #    streamReader.Close();
        #
        #    // Remove comment line which depend on user settings and may trigger false changes in XPO files
        #    text = System.Text.RegularExpressions.Regex::Replace(text, '; [A-Z].*\r\n', '; \r\n');
        #
        #
        #    // Replace standard PROPERTIES section with full set of properties, including read-only ones
        #
        #    /* CONFLICTS with xpo export workaround: each export changes ChangedTime resulting in false diffs
        #    pattern = '(\r\n  PROPERTIES\r\n(.|\r\n)+?\r\n  ENDPROPERTIES\r\n){1}?';
        #
        #    regEx = new System.Text.RegularExpressions.Regex(pattern, System.Text.RegularExpressions.RegexOptions::Singleline);
        #    regExMatchCollection = regEx.Matches(text);
        #    regExMatch = regExMatchCollection.get_Item(0);
        #
        #    propertiesStr = _treeNode.AOTgetProperties();
        #    propertiesStr = System.Text.RegularExpressions.Regex::Replace(propertiesStr, '\n$', '');      // Remove trailing \n
        #    propertiesStr = System.Text.RegularExpressions.Regex::Replace(propertiesStr, '\n', '\r\n  '); // Fix CR and increse indent
        #    propertiesStr = '\r\n  ' + propertiesStr + '\r\n';
        #
        #    text = text.Replace(regExMatch.get_Value(), propertiesStr);
        #
        #    // Incorrect - replaces ALL occurrences of PROPERTIES. Probably can be solved by tuning regex pattern
        #    //text = System.Text.RegularExpressions.Regex::Replace(
        #        //text,
        #        //pattern,
        #        //propertiesStr,
        #        //System.Text.RegularExpressions.RegexOptions::Singleline
        #        //);
        #    */
        #
        #    streamWriter = new System.IO.StreamWriter(_fullPath, false, encoding);
        #    streamWriter.Write(text);
        #    streamWriter.Close();
        #}
      ENDSOURCE
      SOURCE #removeExportComment_DEL
        #static void removeExportComment_DEL(
        #    TreeNode    _treeNode,
        #    str         _fullPath)
        #
        #{
        #    #define.encoding(FileEncoding::UTF8)
        #
        #    TextBuffer                              textBuffer;
        #    System.Text.RegularExpressions.Regex    regex;
        #
        #    int         startPos;
        #    int         endPos;
        #
        #    new FileIoPermission(_fullPath,'w').assert();
        #    textBuffer = new TextBuffer();
        #
        #    if (! textBuffer.fromFile(_fullPath, #encoding))
        #        throw error(strFmt('Failed loading file %1', _fullPath));
        #
        #    //textBuffer.regularExpressions(true);
        #    regex = new System.Text.RegularExpressions.Regex('todo');
        #
        #    textBuffer.setText(regex.Replace(textBuffer.getText(), 'todo'));
        #
        #    /*
        #        Every XPO file contains these lines (language depends on user settings!):
        #
        #    ; 
        #    ; --------------------------------------------------------------------------------
        #
        #        Must be removed to prevent committing of false modifications.
        #    */
        #    textBuffer.find('<;: :n+', 0);                     // find first comment line starting with '; 
        #    startPos = textBuffer.matchPos();
        #    endPos = startPos + textBuffer.matchLen();
        #
        #    textBuffer.find('<;: -', startPos+1);               // find end of comment line
        #    endPos = textBuffer.matchPos();
        #
        #    textBuffer.delete(startPos+3, endPos-startPos-3); // remove comment, leaving blank line
        #
        #    // Standard Ax export does not export AOT objects' read-only properties, like "ChangedBy" or "ChangeDate".
        #    // It might be useful to track changes in these properties also
        #    // Replace it with full list of properties
        #info(strFmt('%1',textBuffer.regularExpressions()));
        #
        #    if (textBuffer.find('<:SPACE+PROPERTIES>', 0))
        #    {
        #        startPos = textBuffer.matchPos();
        #
        #        if (textBuffer.find('ENDPROPERTIES\n', 0))
        #        {
        #        endPos = textBuffer.matchPos();
        #info(textBuffer.subStr(startPos, endPos-startPos));
        #    endPos += strLen('ENDPROPERTIES');
        #info(textBuffer.subStr(startPos, endPos-startPos));
        #    textBuffer.find('\n', endPos+2);
        #    endPos = textBuffer.matchPos();
        #info(textBuffer.subStr(startPos, endPos-startPos));
        #
        #    textBuffer.delete(startPos, endPos-startPos);
        #    textBuffer.insert(_treeNode.AOTgetProperties(), startPos);
        #        }
        #    }
        #
        #    textBuffer.toFile(_fullPath, #encoding);
        #
        #    textBuffer.setText('');
        #    textBuffer = null;
        #}
      ENDSOURCE
      SOURCE #runProgram
        # static str runProgram(
        #    FileName    _program,
        #    str         _arguments,
        #    boolean     _runAsAdmin         = false,
        #    boolean     _useShellExecute    = false)
        #{
        #    System.Diagnostics.ProcessStartInfo processStartInfo;
        #    System.Diagnostics.Process          process;
        #    System.OperatingSystem              operatingSystem;
        #    System.Version                      operatingSystemVersion;
        #    System.Exception                    ex;
        #    int                                 major;
        #    Boolean                             start;
        #    System.IO.StreamReader              streamRead;
        #    str                                 retStr;
        #    ;
        #
        #    try
        #    {
        #        new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #        processStartInfo    = new System.Diagnostics.ProcessStartInfo(_program, _arguments);
        #        process             = new System.Diagnostics.Process();
        #        processStartInfo.set_UseShellExecute(_useShellExecute);
        #        processStartInfo.set_RedirectStandardOutput(true);
        #        processStartInfo.set_WindowStyle(System.Diagnostics.ProcessWindowStyle::Minimized);
        #        processStartInfo.set_CreateNoWindow(true);
        #        process.set_StartInfo(processStartInfo);
        #
        #        start = process.Start();
        #        process.WaitForExit();
        #
        #        streamRead = process.get_StandardOutput();
        #        retStr = streamRead.ReadToEnd();
        #
        #        CodeAccessPermission::revertAssert();
        #
        #        return retStr;
        #    }
        #    catch(Exception::CLRError)
        #    {
        #        // BP Deviation documented
        #        ex = ClrInterop::getLastException();
        #
        #        while (ex != null)
        #        {
        #            error(ex.ToString());
        #
        #            ex = ex.get_InnerException();
        #        }
        #
        #        throw error(strFmt('Error executing "%1" with arguments "%2"', _program, _arguments));
        #    }
        #}
      ENDSOURCE
      SOURCE #treeNodeAOTLayers
        #public static Set treeNodeAOTLayers(TreeNode _treeNode)
        #{
        #    SysModelLayer       sysModelLayer;
        #    SysModelElement     sysModelElement_Root;
        #    SysModelElement     sysModelElement;
        #    SysModelElementData sysModelElementData;
        #    SysModelElementType sysModelElementType;
        #
        #    TreeNodePath        treeNodePathFull;
        #    TreeNodePath        treeNodePath;
        #    TreeNodeName        treeNodeName;
        #    int                 lastSlashPos;
        #    Set                 ret = new Set(Types::Integer);
        #
        #    treeNodePathFull = _treeNode.treeNodePath();
        #    lastSlashPos = strScan(treeNodePathFull, @'\', strLen(treeNodePathFull), -strLen(treeNodePathFull));
        #    treeNodePath = subStr(treeNodePathFull, 1, lastSlashPos-1);
        #    treeNodeName = subStr(treeNodePathFull, lastSlashPos+1, strLen(treeNodePathFull));
        #
        #    // Maps and Views do not have separate types in SysModelElementType - they are stored as Tables. ?..
        #    if (treeNodePath == @'\Data dictionary\Views' || treeNodePath == @'\Data dictionary\Maps')
        #    {
        #        treeNodePath = @'\Data dictionary\Tables';
        #    }
        #
        #    select firstOnly RecId from sysModelElement_Root
        #        where sysModelElement_Root.Name == treeNodeName
        #           && sysModelElement_Root.RootModelElement == sysModelElement_Root.RecId
        #           && !sysModelElement_Root.ParentId
        #    exists join sysModelElementType
        #        where sysModelElementType.RecId == sysModelElement_Root.ElementType
        #           && sysModelElementType.TreeNodeName == treeNodePath;
        #
        #    while select RecId from sysModelElement
        #        where (!sysModelElement.RootModelElement && sysModelElement.RecId            == sysModelElement_Root.RecId) // the root element itself
        #           || ( sysModelElement.RootModelElement && sysModelElement.RootModelElement == sysModelElement_Root.RecId) // or any sub-element
        #    join Layer from sysModelElementData
        #        where sysModelElementData.ModelElement == sysModelElement.RecId
        #    join sysModelLayer
        #        group by Layer
        #        where sysModelLayer.RecId == sysModelElementData.Layer
        #    {
        #        ret.add(sysModelLayer.Layer);
        #    }
        #
        #    if (!ret.elements())
        #    {
        #        warning(treeNodePathFull + ' - no layers found!');
        #    }
        #
        #    return ret;
        #}
        #/* also works, but waaay too slow..
        #
        #    TreeNode        treeNodeInLayer;
        #    UtilEntryLevel  layer;
        #    Set             ret = new Set(Types::Integer);
        #
        #    for (layer=UtilEntryLevel::sys; layer<=UtilEntryLevel::usp; layer++)
        #    {
        #        treeNodeInLayer = _treeNode.getNodeInLayer(layer);
        #        if (treeNodeInLayer)
        #        {
        #            ret.add(layer);
        #            treeNodeInLayer.treeNodeRelease();
        #            treeNodeInLayer = null;
        #        }
        #    }
        #*/
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: END
